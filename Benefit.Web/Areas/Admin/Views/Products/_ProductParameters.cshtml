@using Benefit.Domain.Models
@model Product
@{
    var parameters = new List<ProductParameter>();
    if (Model.Category != null)
    {
        parameters = Model.Category.ProductParameters.OrderBy(entry => entry.Order).ToList();
        var parameterIds = new List<string>();
        if (!parameters.Any() && Model.Category.MappedParentCategory != null)
        {
            parameters = Model.Category.MappedParentCategory.ProductParameters.OrderBy(entry => entry.Order).ToList();
        }
    }
    var validationErrors = ViewData.ModelState.Values.Where(x => x.Errors.Count >= 1).Select(entry => entry.Value == null ? null : entry.Value.AttemptedValue).ToList();
}
<div class="container">
    @if (Model.Category == null)
    {
        <div>Редагування характеристик доступно після збереження продукта</div>
    }
    else
    {
        <a href="@Url.Action("Index","ProductParameters", new { categoryId = Model.CategoryId })" target="_blank" class="margin-bottom-15" style="display: block;">
            <i class="icon-pencil"></i>
            Редагувати назви і значення характеристик
        </a>
        var order = 0;
        foreach (var parameter in parameters)
        {
            var values = Model.ProductParameterProducts.Where(entry => entry.ProductParameterId == parameter.Id).ToList();
            <div class="row margin-bottom-15 feature-row" data-parameter-id="@parameter.Id" data-order="@(order++)">
                @{
                    var type = parameter.Type == typeof(string).ToString() ? "значення" : "число";
                }
                <div class="col-sm-3 feature_name">
                    @parameter.Name
                </div>
                <div class="feature-value col-sm-4 no-padding-horizontal">
                    @{
                        var paramValue = values.FirstOrDefault(entry => entry.ProductParameterId == parameter.Id);
                        var paramValueText = paramValue == null ? string.Empty : paramValue.StartText;
                        var validationClass = validationErrors.Contains(paramValueText) ? "input-validation-error" : "";
                    }
                    <input class="feature_input @validationClass" type="text" value="@(paramValueText)" name="ProductParameterProducts[{n}].StartText" data-parameter-id="@parameter.Id">
                    @Html.Hidden("ProductParameterProducts[{n}].ProductParameterId", parameter.Id)
                    <button type="button" class="btn btn_mini btn-info feature_multi_values fn-add-product-option-value" data-parameter-id="@parameter.Id">
                        <i class="icon-plus"></i>
                    </button>
                    @*<button type="button" class="btn btn_mini btn-danger feature_multi_values fn-remove-parameter" data-parameter-id="@parameter.Id" data-category-id="@parameter.CategoryId">
                        <i class="icon-trash"></i>
                    </button>*@
                </div>
            </div>
            if (values.Count > 1)
            {
                foreach (var paramVal in values.Skip(1))
                {
                    @Html.Partial("~/Areas/Admin/Views/ProductParameters/_ProductOption.cshtml", paramVal)
                }
            }
        }
    }
    <button type="button" id="add-feature" class="btn btn-info">+ Додати характеристику</button>
</div>