@using Benefit.Common.Extensions
@using Benefit.Common.Helpers
@using Benefit.Domain.Models.Enums
@model Benefit.Domain.Models.ApplicationUser
<div class="partner_head col-lg-2 col-md-2 col-sm-2 col-xs-2">
    <div class="userpic">
        <div class="userpic_wrap">
            @{
                var avaUrl = string.IsNullOrEmpty(Model.Avatar) ? "avatar.jpg" : Model.Avatar;
            }
            <img src="~/Images/UserAvatar/@avaUrl" alt="userpic" class="userpic" />
        </div>
    </div>

    <div class="user_right">
        @using (Html.BeginForm("SetAvatar", "Panel", FormMethod.Post, new { id = "set_ava_picture", enctype = "multipart/form-data" }))
        {
            <input type="file" name="avatar" id="ava_select" class="hide" accept="image/*" />
        }
        <p class="user_name">@Model.FullName</p>
        @if (!Model.Status.HasValue)
        {
            <p class="user_statuse">CLIENT</p>
        }
        else
        {
            <p class="user_statuse">@Enumerations.GetEnumDescription(Model.Status)</p>
        }
        @if (Model.BusinessLevel != null && Model.BusinessLevel == BusinessLevel.Ultimate)
        {
            <p class="user_business_status">Нарахування за B2B: подвійне</p>
        }

        <p class="ref_code">Реєстраційний код:<br>@Model.ExternalNumber</p>

        <p class="bonus_available bonus_available_mobile">Доступні бонуси: <span class="bonus_border">@Model.BonusAccount.ToDoubleDigits()</span></p>
        <p class="user_statuse user-balls-mobile margin-top-10">
            Особисті бали за поточний період:<br><span class="bonus_border">
                @string.Format("{0:0.00}", Math.Truncate(Model.PointsAccount*100)/100)
            </span>
        </p>
        <p class="total-bonuses">
            Загальний чек:<br><span class="bonus_border"> @Model.TotalBonusAccount.ToString("F")</span>
        </p>
    </div>

    <p class="card_numb">Номер бонусної картки:<br>@Model.CardNumber</p>
    <p class="bonus_count">Загальний чек:<br><span class="bonus_border">@Model.TotalBonusAccount.ToString("F")</span></p>
    <p class="bonus_available">
        Доступні бонуси:
        <br />
        <span class="bonus_border">
            @string.Format("{0:0.00}", Math.Truncate(Model.BonusAccount * 100) / 100)
        </span>
    </p>
    <p class="bonus_personal">
        Бонуси в обробці
        <br />
        <span class="bonus_border">
            @string.Format("{0:0.00}", Math.Truncate(Model.HangingBonusAccount * 100) / 100)
        </span>
    </p>
    <p class="bonus_personal">
        Особисті бонуси за поточний період:
        <br />
        <span class="bonus_border">
            @string.Format("{0:0.00}", Math.Truncate(Model.CurrentBonusAccount * 100) / 100)
        </span>
    </p>
    <p class="ball_personal">
        Особисті бали за поточний період:<br><span class="bonus_border">
            @string.Format("{0:0.00}", Math.Truncate(Model.PointsAccount * 100) / 100)
        </span>
    </p>
    @{
        var batteryStatus = "battary_full";
        //todo: to constants
        if (Model.PointsAccount <= 199.99)
        {
            batteryStatus = "battary_low";
        }
        if (Model.PointsAccount >= 200 && Model.PointsAccount < 500)
        {
            batteryStatus = "battary_middle";
        }
        string qualificationEpsilonStr;
        var qualificationEpsilon = 500 - Model.PointsAccount;
        if (qualificationEpsilon > 0)
        {
            qualificationEpsilonStr = string.Format("До виконання кваліфікації та отримання комісійної винагороди залишилось набрати {0} балів", qualificationEpsilon.ToString("F"));
        }
        else
        {
            qualificationEpsilonStr = "Ви виконали кваліфікацію!";
        }
    }
    <div class="battery @batteryStatus" data-toggle="tooltip" data-placement="top" title="@qualificationEpsilonStr"></div>
</div>