@using Benefit.Common.Constants
@using Benefit.Common.Extensions
@model Benefit.Domain.Models.Product

@{
    Model.AvarageRating = Model.AvarageRating ?? default(int);
}           

@using (Html.BeginForm("AddReview", "Tovar"))
{
    <label class="recall_label" for="recall">Залишити відгук</label>
    <div>
        Ваша оцінка: <span id="review-rating" class="pointer rating_star @CommonConstants.RatingToClass[Model.AvarageRating]"></span>
    </div>
    <br/>
    var placeholder = User.Identity.IsAuthenticated ? "Текст відгуку" : "Залишити відгук може лише авторизований користувач";
    <textarea class="recall_text" name="Message" placeholder="@placeholder"></textarea>
    <input type="hidden" name="ProductId" value="@Model.Id" />
    <input type="hidden" name="Rating" id="Rating" />
    if (User.Identity.IsAuthenticated)
    {
        <button type="submit" class="btn btn-success">Залишити відгук</button>
    }
    else
    {
        <p class="recall_register_notice"><a href="@Url.Action("Login","Account")">Увійдіть</a> або <a href="@Url.Action("Register","Account")">зареєструйтесь,</a> щоб залишити коментар</p>
    }
}

@if (Model.Reviews.Any(entry => entry.IsActive))
{
    <div class="recall_title_wrap clearfix">
        <div class="recall_title">Відгуки про @Model.Name</div>
        <div class="recall_rating">
            <span class="rating_all">@Model.ApprovedReviews.Count відгук(а)</span>
        </div>
    </div>
    foreach (var review in Model.Reviews.Where(entry=>entry.IsActive).OrderByDescending(entry=>entry.Stamp))
    {
        <div class="recall_item">
            <div class="recall_item_head">
                <div class="recall_name">@review.UserFullName</div>
                <div class="recall_time">@review.Stamp.ToLocalDateTimeWithFormat()</div>
            </div>
            <span class="rating_star @CommonConstants.RatingToClass[review.Rating]"></span>
            <p class="recall_main">
                @review.Message
            </p>
        </div>
    }
}