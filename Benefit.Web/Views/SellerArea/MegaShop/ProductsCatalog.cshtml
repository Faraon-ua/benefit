@using Benefit.Common.Constants
@using Benefit.Domain.Models
@using Benefit.Web.Helpers
@model Benefit.DataTransfer.ViewModels.NavigationEntities.ProductsViewModel

@{
    ViewBag.Title = Model.Category.Name;
    Layout = "_SellerLayout.cshtml";
    var seller = ViewBag.Seller;
    var isFavorites = (Model.Category != null && Model.Category.UrlName == "favorites");
    ViewBag.IsFavorites = isFavorites;
}
@section styles
{
    <link href="~/Content/seller/megashop/bootstrap-slider.css" rel="stylesheet" />
    <link href="~/Content/css/font-awesome.min.css" rel="stylesheet" />
    <link href="~/Content/css/bootstrap.modal.css" rel="stylesheet" />
}
@section scripts
{
    <script src="~/Scripts/seller/megashop/jquery-ui.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src="~/Scripts/bootstrap-slider.min.js"></script>
    <script>
        var productOptionsUrl = '@Url.Action("GetProductOptions", "Tovar")';
        var addToCartUrl = '@Url.Action("AddProduct", "Cart")';
        var getProductsUrl = '@Url.Action("GetProducts", "Catalog")';
        var addToFavoritesUrl =
            '@Html.Raw(Url.Action("AddToFavorites", "Tovar", new {returnUrl = Request.Url.PathAndQuery}))';
        var removeFromFavoritesUrl = '@Url.Action("RemoveFromFavorites", "Tovar")';
        var showMessagePopupUrl = '@Url.Action("ShowMessagePopup", "Home")';
        var options = "";
        var showFiltersReset = false;
        var parts = location.href.split('/');
        var lastSegment = (parts.pop() || parts.pop()).replace('#', ''); // handle potential trailing slash
        var sortControl = $(".sort_btn[data-sort-value=Rating]");

        $(function() {
            if ($('#price-slider').length > 0) {
                $('#price-slider').bootstrapSlider().on('change',
                    function(data) {
                        $("#price-lower-bound").val(data.value.newValue[0]);
                        $("#price-upper-bound").val(data.value.newValue[1]);
                        $("#price-filter").attr("data-filter-value",
                            data.value.newValue[0] + "-" + data.value.newValue[1]);
                    }).data('slider');
            }

            $("#remove-all").click(function() {
                $(".remove-from-favorites").click();
            });

            $("#remove-selected").click(function() {
                $(".select-product:checked").siblings(".remove-from-favorites ").click();
            });

            $("#buy-all").click(function() {
                $(this).attr("disabled", "disabled");
                $(".product_buy").click();
            });

            $(".ajax_load_btn, .paging").click(function(e) {
                e.preventDefault();
                $(".products-wrapper").css("opacity", "0.3");
                var moreBtn = $(this);
                var page = parseInt(moreBtn.attr("data-page"));

                var pageUrl;
                if (lastSegment === '@Model.Category.UrlName') {
                    pageUrl = lastSegment + "/page=" + (page + 1) + ";/";
                } else {
                    pageUrl = lastSegment.replace(/page=\d/g, 'page=' + (page + 1));
                }
                history.pushState("history", "page " + page, pageUrl);
                $(".loader").show();
                if (!moreBtn.hasClass("ajax_load_btn")) {
                    $("html, body").animate({ scrollTop: 0 }, 1000);
                }
                $.get(getProductsUrl +
                    "?layout=1&categoryId=@Model.Category.Id&sellerId=@seller.Id&page=" +
                    page +
                    "&options=" +
                    options,
                    function(data) {
                        var maxNumber = parseInt($(".paging:not(.next)").last().attr("data-page"));
                        $(".paging").parent().show();
                        $(".split").remove();
                        if (moreBtn.hasClass("ajax_load_btn")) {
                            if (data.number <= parseInt('@ListConstants.DefaultTakePerPage')) {
                                moreBtn.hide();
                                $(".paging.next").parent().hide();
                            } else {
                                $(".paging.next").parent().show();
                            }
                            $(".product-item:last").after(data.products);
                            moreBtn.attr("data-page", page + 1);
                            $(".paging[data-page=" + (page + 1) + "]:not(.prev):not(.next)").parent()
                                .addClass("active");
                        } else {
                            if (data.number <= parseInt('@ListConstants.DefaultTakePerPage')) {
                                $(".ajax_load_btn").hide();
                                $(".paging.next").parent().hide();
                            } else {
                                $(".ajax_load_btn").show();
                                $(".paging.next").parent().show();
                            }
                            var visibleLinks = $("a[data-page=0],a[data-page=1],a[data-page=" +
                                maxNumber +
                                "],a[data-page=" +
                                (maxNumber - 1) +
                                "],a[data-page=" +
                                page +
                                "],a[data-page=" +
                                (page + 1) +
                                "],a[data-page=" +
                                (page - 1) +
                                "]").not(".prev,.next");
                            $(".paging:not(.prev):not(.next)").not(visibleLinks).parent().hide();
                            if (page > 3) {
                                $(".paging[data-page=" + (page - 1) + "]").parent()
                                    .before("<li class='page_item split'>...</li>");
                            }
                            if (page < (maxNumber - 1)) {
                                $(".paging[data-page=" + (page + 1) + "]").parent()
                                    .after("<li class='page_item split'>...</li>");
                            }
                            $(".products-wrapper").html(data.products);
                            $(".paging").parent().removeClass("active");
                            $(".paging[data-page=" + page + "]:not(.prev):not(.next)").parent().addClass("active");
                            if (page > 0) {
                                $(".paging.prev").parent().show();
                            } else {
                                $(".paging.prev").parent().hide();
                            }
                            $(".paging.prev").attr("data-page", (page - 1));
                            $(".paging.next").attr("data-page", (page + 1));
                            $(".ajax_load_btn").attr("data-page", (page + 1));
                        }
                        $(".products-wrapper").css("opacity", "1");
                        $(".loader").hide();
                    });
            });

            $("#reset-filters").click(function() {
                location.href = location.href.substring(0, location.href.indexOf(lastSegment));
            });

            $('body').on("click",
                ".remove-filter",
                function() {
                    var optionName = $(this).parent().attr("data-option-name");
                    var optValue = decodeURI($(this).parent().attr("data-option-value"));
                    var checkbox = $(".filter-section[data-filter-name=" + optionName + "] input#" + optValue);
                    if (checkbox.length === 0) {
                        checkbox = $(".filter-section[data-filter-name=" +
                            optionName +
                            "] input[name=" +
                            optValue.replace(" ", "") +
                            "]");
                    }
                    checkbox.click();
                });

            $(".bx_filter_parameters_box_title").click(function() {
                $(this).parent().toggleClass("active");
                $(this).next().slideToggle();
            });

            $(".filter_opener").click(function() {
                $(this).toggleClass("opened");
                $(".bx_filter_vertical, .bx_filter").slideToggle(333);
            });

            var pagesMaxNumber = parseInt('@Model.PagesCount') - 1;
            var currentPage = 0;
            if (lastSegment !== '@Model.Category.UrlName') {
                var result = lastSegment.match(/page=(\d)/i);
                if (result[1]) {
                    currentPage = parseInt(result[1]) - 1;
                    $(".paging").parent().removeClass("active");
                    $("a[data-page=" + currentPage + "]").parent().addClass("active");
                }
            }
            //hide redundant pages
            var visibleLinks = $("a[data-page=0],a[data-page=1],a[data-page=2],a[data-page=" +
                pagesMaxNumber +
                "],a[data-page=" +
                (pagesMaxNumber - 1) +
                "],a[data-page=" +
                currentPage +
                "],a[data-page=" +
                (currentPage + 1) +
                "],a[data-page=" +
                (currentPage - 1) +
                "]").not(".prev,.next");
            $(".paging:not(.prev):not(.next)").not(visibleLinks).parent().hide();
            $(".paging[data-page=2]").parent().after("<li class='page_item split'>...</li>");

            //select all checkboxes from url

            @if (Model.Category != null)
            {<text>
                 if (lastSegment.toLowerCase() != '@Model.Category.UrlName.ToLower()') {
                     options = lastSegment;
                     $.each(options.split(";"),
                         function(i, urlSegment) {
                             if (urlSegment === "") return;
                             var optKeyValue = urlSegment.split("=");
                             var optionName = optKeyValue[0];
                             var optionValues = optKeyValue[1].split(",");
                             if (optionName)
                                 if (optionName === "sort") {
                                     var optionValue = optionValues[0];
                                     sortControl = $(".sort_btn[data-sort-value=" + optionValue + "]");
                                     $(".sort_btn span").removeClass("badge");
                                     return true;
                                 }
                             if (optionName === "price") {
                                 var optionValue = optionValues[0];
                                 var prices = optionValue.split('-');
                                 var lowerPrice = parseInt(prices[0]);
                                 var upperPrice = parseInt(prices[1]);
                                 $("#price-lower-bound").val(lowerPrice);
                                 $("#price-upper-bound").val(upperPrice);
                                 $("#price-filter").prop('checked', true);
                                 $("#price-slider").data('slider').setValue([lowerPrice, upperPrice]);
                                 $(".selected-filters").append(
                                     "<span class='badge padding_5 margin-right-10 margin-top-5 ' data-option-name='price' data-option-value='price-filter'>" +
                                     optionValue +
                                     " грн<i class='fa fa-times-circle pointer remove-filter' style='font-size:1.5em'></i></span>"
                                 );
                                 return true;
                             }
                             $.each(optionValues,
                                 function(j, optValue) {
                                     showFiltersReset = true;
                                     var checkbox = $(".filter-section[data-filter-name=" +
                                         optionName +
                                         "] input#" +
                                         decodeURI(optValue));
                                     if (checkbox.length === 0) {
                                         checkbox = $(".filter-section[data-filter-name=" +
                                             optionName +
                                             "] input[name=" +
                                             decodeURI(optValue).replace(" ", "") +
                                             "]");
                                     }
                                     checkbox.prop('checked', true);
                                     var optionvalueText = checkbox.attr("text");
                                     $(".selected-filters").append(
                                         "<span class='badge padding_5 margin-right-10 margin-top-5 ' data-option-name='" +
                                         optionName +
                                         "' data-option-value='" +
                                         optValue +
                                         "'>" +
                                         optionvalueText +
                                         " <i class='fa fa-times-circle pointer remove-filter' style='font-size:1.5em'></i></span>"
                                     );
                                 });
                             if (showFiltersReset) {
                                 $("#reset-filters").show();
                             }
                         });
                 }
             </text>
            }
            sortControl.find("span").addClass("badge");

            @if (Model.Category != null)
            {
                <text>
                    $('body').on('change click',
                        "#productFilters input[type=checkbox], #productFilters button, .sort_btn",
                        function(e) {
                            e.preventDefault();
                            $(".loader").show();
                            var parts = location.href.split('/');
                            var lastSegment =
                                (parts.pop() || parts.pop()).replace("#", ""); // handle potential trailing slash

                            if (lastSegment != '@Model.Category.UrlName') {
                                options = lastSegment;
                            }

                            var parent = $(this).parents(".filter-section");
                            var optionName = parent.attr("data-filter-name");
                            var optionNameIndex = options.indexOf(optionName);

                            var currentOption = '';
                            var selectedValues = parent.find("input[type=checkbox]:checked, button").map(function() {
                                if ($(this).attr("data-filter-value")) {
                                    return $(this).attr("data-filter-value");
                                }
                                return $(this).attr("id");
                            }).get();

                            if ($(this).attr("class").indexOf("sort_btn") >= 0) {
                                var val = $(this).attr("data-sort-value");
                                selectedValues.push(val);
                            }
                            if (selectedValues.length > 0) {
                                currentOption = optionName;
                                currentOption += "=";
                                currentOption += selectedValues.join();
                                currentOption += ";";
                            }

                            if (optionNameIndex >= 0) {
                                var ending = options.indexOf(";", optionNameIndex);
                                var oldOption = options.substring(optionNameIndex, ending + 1);
                                options = options.replace(oldOption, currentOption);
                            } else {
                                options += currentOption;
                                options = options.replace(/page=\d/g, 'page=1');
                            }
                            //check for page
                            if (options.indexOf('page=') === -1) {
                                options += "page=1;";
                            }
                            var locBuilder;
                            if (lastSegment !== '@Model.Category.UrlName') {
                                locBuilder = location.href.replace(lastSegment, "") + options;
                                location.href = locBuilder;
                            } else {
                                locBuilder = location.href;
                                if (location.href[location.href.length - 1] !== "/") {
                                    locBuilder += "/";
                                }
                                window.location.href = locBuilder + options;
                            }
                        });
                </text>
            }
        });
    </script>
    <script src="~/Scripts/v3/products.js"></script>
}
@section LeftAside
{
    <div class="filters_block">
        <div class="filters_heading fn_switch md-hidden">
            <span data-language="filters">Фильтр</span>
            <i class="angle_icon"></i>
        </div>
        <div class="filters mobile-hidden">
            @Html.Partial("~/Views/Catalog/_ProductFilters.cshtml", Model.ProductParameters)
        </div>
    </div>
}
<div class="col-md-8 col-xl-9 content">
    @Html.Partial("~/views/sellerarea/megashop/_BreadcrumbsPartial.cshtml", Model.Breadcrumbs)

    <div class="fn_ajax_content">

        <h1 class="h1"><span data-category="3">@Model.Category.Name</span>  </h1>
        @if (Model.IsFavorites)
        {
            <div class="padding-15">
                <button id="remove-all" type="button" class="button btn-danger no-border">Видалити всі</button>
                <button id="remove-selected" type="button" class="button no-border margin-left-30">Видалити обрані</button>
                <button id="buy-all" type="button" class="button btn-success no-border margin-left-30">Купити всі</button>
            </div>
        }
        @if (RouteDataHelper.ControllerName.ToLower() != "search" && !Model.IsFavorites)
        {
            <div class="fn_products_sort clearfix sort_header margin-top-10 visible-lg">
                <div class="sort_filter visible-lg filter-section" data-filter-name="sort">
                    <span style="display: table-cell; vertical-align: middle;">Показати спочатку: </span>

                    <a href="" data-sort-value="Rating" class="sort_btn" rel="nofollow">
                        <span class="padding-10">По рейтингу</span>
                    </a>
                    <a href="" data-sort-value="NameAsc" class="sort_btn" rel="nofollow">
                        <span class="padding-10">По алфавіту</span>
                    </a>
                    <a href="" data-sort-value="PriceAsc" class="sort_btn" rel="nofollow">
                        <span class="padding-10">Дешеві</span>
                    </a>
                    <a href="" data-sort-value="PriceDesc" class="sort_btn" rel="nofollow">
                        <span class="padding-10">Дорогі</span>
                    </a>
                </div>
            </div>
        }

        <div id="fn_products_content" class="fn_categories products row products-wrapper">
            @{
                var take = Model.IsFavorites ? Model.Items.Count : ListConstants.DefaultTakePerPage;
            }
            @foreach (var product in Model.Items.Take(take))
            {
                @Html.Partial("~/Views/SellerArea/megashop/_ProductPartial.cshtml", product)
            }
        </div>
        @if (!Model.IsFavorites)
        {
            if (Model.Items.Count > ListConstants.DefaultTakePerPage)
            {
                <div class="ajax_load_btn" data-page="0">
                    <span class="more_text_ajax">Показати ще</span>
                </div>
            }
            if (Model.PagesCount > 1)
            {
                <ul class="pagination">
                    <li class="page_item" data-page="0" style="display: none;">
                        <a class="page_link paging prev" href="#" data-page="0"><< Назад</a>
                    </li>
                    <li class="page_item active" data-page="0">
                        <a class="page_link paging" href="#" data-page="0">1</a>
                    </li>
                    @for (int i = 2; i <= Model.PagesCount; i++)
                    {
                        <li class="page_item">
                            <a class="page_link paging" href="#" data-page="@(i - 1)">@i</a>
                        </li>
                    }
                    <li class="page_item" data-page="1">
                        <a class="page_link paging next" href="#" data-page="1">Вперед >></a>
                    </li>
                </ul>
            }
        }
        <br style="clear: both;" />
    </div>
</div>
<div class="modal-container"></div>
